# Copyright (c) 2017, The Linux Foundation. All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are
# met:
#     * Redistributions of source code must retain the above copyright
#       notice, this list of conditions and the following disclaimer.
#     * Redistributions in binary form must reproduce the above
#       copyright notice, this list of conditions and the following
#       disclaimer in the documentation and/or other materials provided
#       with the distribution.
#     * Neither the name of The Linux Foundation nor the names of its
#       contributors may be used to endorse or promote products derived
#       from this software without specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED "AS IS" AND ANY EXPRESS OR IMPLIED
# WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
# MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT
# ARE DISCLAIMED.  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS
# BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
# CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
# SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR
# BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
# WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE
# OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN
# IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

type irisdaemon, domain;
type irisdaemon_exec, exec_type, file_type;

#Allow for transition from init domain to irisd
init_daemon_domain(irisdaemon)

#Allow irisd to use Binder IPC
binder_service(irisdaemon)
binder_use(irisdaemon)
binder_call(irisdaemon, system_server);
binder_call(irisdaemon, surfaceflinger);

# service
allow irisdaemon irisdaemon_service:service_manager add;
allow irisdaemon sensorservice_service:service_manager find;

# Access camera device.
allow irisdaemon { video_device camera_device }:chr_file rw_file_perms;
allow irisdaemon mm-qcamerad:unix_dgram_socket sendto;
allow irisdaemon camera_data_file:sock_file w_file_perms;
allow irisdaemon camera_data_file:dir rw_dir_perms;
allow irisdaemon persist_file:dir r_dir_perms;

# Access /data/misc/iris
allow irisdaemon iris_data_file:dir rw_dir_perms;
allow irisdaemon iris_data_file:file rw_file_perms;

# Access ion
allow irisdaemon ion_device:chr_file r_file_perms;

# Access socket
allow irisdaemon irisdaemon:socket {create ioctl read};

# Allow irisdaemon to operate using qseecom_device
allow irisdaemon tee_device:chr_file rw_file_perms;

# Performance mode
unix_socket_connect(irisdaemon, mpctl, perfd)

# Need to add auth tokens to KeyStore
use_keystore(irisdaemon)
allow irisdaemon keystore:keystore_key { add_auth };


# Allow irisdaemon to set persist.iris. property
set_prop(irisdaemon, iris_prop)
unix_socket_connect(irisdaemon, property, init);

allow irisdaemon system_server:unix_stream_socket { read write };

#Allow access to firmware
r_dir_file(irisdaemon, firmware_file)
